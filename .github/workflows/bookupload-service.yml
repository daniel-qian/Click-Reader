name: Build and Deploy EPUB Extractor

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ master, develop ]
    paths:
      - 'bookupload_service/**'
  pull_request:
    branches: [ master ]
    paths:
      - 'bookupload_service/**'

env:
  REGISTRY: registry.cn-hangzhou.aliyuncs.com
  IMAGE_NAME: ${{ secrets.ALIYUN_NAMESPACE }}/click-reader

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./bookupload_service
        file: ./bookupload_service/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to ECS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        key: ${{ secrets.ECS_SSH_KEY }}
        script: |
          # 登录到阿里云容器镜像服务
          echo "${{ secrets.ALIYUN_PASSWORD }}" | docker login ${{ env.REGISTRY }} -u ${{ secrets.ALIYUN_USERNAME }} --password-stdin
          
          # 停止现有容器
          docker stop click-book-service || true
          docker rm click-book-service || true
          
          # 拉取最新镜像
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 使用最新镜像启动新容器
          docker run -d \
            --name click-book-service \
            -p 8082:8082 \
            -e SUPABASE_URL="${{ secrets.SUPABASE_URL }}" \
            -e SUPABASE_SERVICE_KEY="${{ secrets.SUPABASE_SERVICE_KEY }}" \
            -e SUPABASE_STORAGE_BUCKET=bookepub \
            -e BUCKET_HTML=cleanedhtml \
            -e PUBLIC_BUCKET=true \
            -e MAX_FILE_SIZE=50000000 \
            -e DOWNLOAD_TIMEOUT=30000 \
            -e TEMP_DIR=/tmp \
            -e NODE_ENV=production \
            -e PORT=8082 \
            --restart unless-stopped \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # 清理旧镜像
          docker image prune -f
          
          # 验证部署
          sleep 15
          curl -f http://localhost:8082/health || exit 1
          
          echo "Deployment successful! Service is running on port 8082"